<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">
    <h:body>
        <ui:composition template="../../WEB-INF/template/template.xhtml">                         
            <ui:define name="title">Menú Coeficientes</ui:define>
            <ui:define name="content">
                <p:growl autoUpdate="true"/>



                <div class="ui-g">
                    <div class="ui-g-12">
                        <div class="card">
                            <h:form id="frmPrincipal">
                                <center>               
                                    <h1>Ver mi red</h1>
                                    <br/>
                                    <p:selectOneMenu value="#{ctRed.idCuenta}"
                                                     filter="true" filterMatchMode="contains">
                                        <f:selectItem itemLabel="--Seleccione una cuenta --" itemValue="#{null}" noSelectionOption="true"/>
                                        <f:selectItems value="#{ctRed.lstCuentas}" var="cuenta" 
                                                       itemLabel="#{cuenta.codigo}" itemValue="#{cuenta.idCuenta}"/>
                                    </p:selectOneMenu>
                                    <p:commandButton value="Buscar" icon="ui-icon-search"
                                                     action="#{ctRed.crearJson()}"
                                                     ajax="false" update="frmGraficos"/>
                                </center>
                            </h:form>
                        </div>
                    </div>
                </div>

                <h:form id="frmGraficos">
                    <style>
                        .node {
                            cursor: pointer;
                        }

                        .node circle {
                            stroke-width: 3px;
                        }

                        .node text {
                            font: 12px sans-serif;
                            fill: #080808;
                        }

                        .link {
                            fill: none;
                            stroke: #ccc;
                            stroke-width: 2px;
                        }

                        .tree {
                            margin-bottom: 10px;
                            overflow: auto;
                        }
                    </style>


                    <script type="text/javascript">
                        $(document).ready(function () {
                            //build tree
                            function BuildVerticaLTree(treeData, treeContainerDom) {
                                var margin = {top: 40, right: 120, bottom: 20, left: 120};
                                var width = 960 - margin.right - margin.left;
                                var height = 500 - margin.top - margin.bottom;

                                var i = 0, duration = 750;
                                var tree = d3.layout.tree()
                                        .size([height, width]);
                                var diagonal = d3.svg.diagonal()
                                        .projection(function (d) {
                                            return [d.x, d.y];
                                        });
                                var svg = d3.select(treeContainerDom).append("svg")
                                        .attr("width", width + margin.right + margin.left)
                                        .attr("height", height + margin.top + margin.bottom)
                                        .append("g")
                                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                                root = treeData;

                                update(root);
                                function update(source) {
                                    // Compute the new tree layout.
                                    var nodes = tree.nodes(root).reverse(),
                                            links = tree.links(nodes);
                                    // Normalize for fixed-depth.
                                    nodes.forEach(function (d) {
                                        d.y = d.depth * 100;
                                    });
                                    // Declare the nodes…
                                    var node = svg.selectAll("g.node")
                                            .data(nodes, function (d) {
                                                return d.id || (d.id = ++i);
                                            });
                                    // Enter the nodes.
                                    var nodeEnter = node.enter().append("g")
                                            .attr("class", "node")
                                            .attr("transform", function (d) {
                                                return "translate(" + source.x0 + "," + source.y0 + ")";
                                            }).on("click", nodeclick);
                                    nodeEnter.append("circle")
                                            .attr("r", 10)
                                            .attr("stroke", function (d) {
                                                return d.children || d._children ? "steelblue" : "#00c13f";
                                            })
                                            .style("fill", function (d) {
                                                return d.children || d._children ? "lightsteelblue" : "#fff";
                                            });
                                    //.attr("r", 10)
                                    //.style("fill", "#fff");
                                    nodeEnter.append("text")
                                            .attr("y", function (d) {
                                                return d.children || d._children ? -18 : 18;
                                            })
                                            .attr("dy", ".35em")
                                            .attr("text-anchor", "middle")
                                            .text(function (d) {
                                                return d.name;
                                            })
                                            .style("fill-opacity", 1e-6);
                                    // Transition nodes to their new position.
                                    //horizontal tree
                                    var nodeUpdate = node.transition()
                                            .duration(duration)
                                            .attr("transform", function (d) {
                                                return "translate(" + d.x + "," + d.y + ")";
                                            });
                                    nodeUpdate.select("circle")
                                            .attr("r", 10)
                                            .style("fill", function (d) {
                                                return d._children ? "lightsteelblue" : "#fff";
                                            });
                                    nodeUpdate.select("text")
                                            .style("fill-opacity", 1);


                                    // Transition exiting nodes to the parent's new position.
                                    var nodeExit = node.exit().transition()
                                            .duration(duration)
                                            .attr("transform", function (d) {
                                                return "translate(" + source.x + "," + source.y + ")";
                                            })
                                            .remove();
                                    nodeExit.select("circle")
                                            .attr("r", 1e-6);
                                    nodeExit.select("text")
                                            .style("fill-opacity", 1e-6);
                                    // Update the links…
                                    // Declare the links…
                                    var link = svg.selectAll("path.link")
                                            .data(links, function (d) {
                                                return d.target.id;
                                            });
                                    // Enter the links.
                                    link.enter().insert("path", "g")
                                            .attr("class", "link")

                                            .attr("d", function (d) {
                                                var o = {x: source.x0, y: source.y0};
                                                return diagonal({source: o, target: o});
                                            });
                                    // Transition links to their new position.
                                    link.transition()
                                            .duration(duration)
                                            .attr("d", diagonal);


                                    // Transition exiting nodes to the parent's new position.
                                    link.exit().transition()
                                            .duration(duration)
                                            .attr("d", function (d) {
                                                var o = {x: source.x, y: source.y};
                                                return diagonal({source: o, target: o});
                                            })
                                            .remove();

                                    // Stash the old positions for transition.
                                    nodes.forEach(function (d) {
                                        d.x0 = d.x;
                                        d.y0 = d.y;
                                    });
                                }

                                // Toggle children on click.
                                function nodeclick(d) {
                                    if (d.children) {
                                        d._children = d.children;
                                        d.children = null;
                                    } else {
                                        d.children = d._children;
                                        d._children = null;
                                    }
                                    update(d);
                                }
                            }

                            var treeData =#{ctRed.json};
                            BuildVerticaLTree(treeData, "#tree");
                        });
                    </script>

                    <script src="http://d3js.org/d3.v3.min.js"></script>

                    <div class="ui-g">
                        <div class="ui-g-12">
                            <div class="card">

                                <div id="tree">

                                </div>
                            </div>
                        </div>
                    </div>

                </h:form>



                <link href="../../resources/css/estilos-menus.css" rel="stylesheet" type="text/css"/>
                <link href="../../resources/css/estilosSatu.css" rel="stylesheet" type="text/css"/>
                <h:outputStylesheet name="css/ripple.css" library="ultima-layout" />
                <h:outputStylesheet name="css/layout-yelou.css" library="ultima-layout" />
            </ui:define>
        </ui:composition>
    </h:body>
</html>